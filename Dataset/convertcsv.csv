Vulnerability,Example
Reentrancy,"contract Vulnerable { mapping(address => uint) balances; function withdraw() public { uint amount = balances[msg.sender]; (bool success, ) = msg.sender.call{value: amount}(""); require(success); balances[msg.sender] = 0; }}"
Reentrancy,"contract Bank { mapping(address => uint) public balances; function withdrawAll() public { uint bal = balances[msg.sender]; require(bal > 0); (bool sent, ) = msg.sender.call{value: bal}(""); require(sent); balances[msg.sender] = 0; }}"
Reentrancy,"contract UnsafeWithdraw { mapping(address => uint) public ledger; function cashOut() external { uint owed = ledger[msg.sender]; require(owed > 0); (bool ok, ) = msg.sender.call{value: owed}(""); require(ok); ledger[msg.sender] = 0; }}"
Reentrancy,"contract WeakBank { mapping(address => uint) deposits; function withdraw() external { uint deposit = deposits[msg.sender]; require(deposit > 0); payable(msg.sender).transfer(deposit); deposits[msg.sender] = 0; }}"
Reentrancy,"contract Hackable { mapping(address => uint) funds; function retrieve() public { uint amount = funds[msg.sender]; (bool sent, ) = msg.sender.call{value: amount}(""); require(sent); funds[msg.sender] = 0; }}"
Reentrancy,"contract Insecure { uint public total; function take() external { uint share = total / 2; (bool success, ) = msg.sender.call{value: share}(""); require(success); total -= share; }}"
Reentrancy,"contract BadDesign { mapping(address => uint) public savings; function withdrawSavings() external { uint save = savings[msg.sender]; require(save > 0); msg.sender.call{value: save}(""); savings[msg.sender] = 0; }}"
Reentrancy,"contract Flawed { mapping(address => uint) public holdings; function claim() public { uint held = holdings[msg.sender]; (bool success, ) = msg.sender.call{value: held}(""); require(success); holdings[msg.sender] = 0; }}"
Reentrancy,"contract Risky { mapping(address => uint) public accounts; function empty() external { uint balance = accounts[msg.sender]; payable(msg.sender).transfer(balance); accounts[msg.sender] = 0; }}"
Reentrancy,"contract Exploitable { uint public userBalance; function withdrawBalance() public { uint balance = userBalance; (bool sent, ) = msg.sender.call{value: balance}(""); require(sent); userBalance = 0; }}"
Integer Overflow,"contract Overflow { uint8 public count = 255; function increment() public { count += 1; }}"
Integer Overflow,"contract UnsafeMath { uint public max = 2**256 - 1; function add(uint x) public { max += x; }}"
Integer Overflow,"contract BadCounter { uint8 public value = 0; function add(uint8 x) public { value += x; }}"
Integer Overflow,"contract FlawedToken { uint256 public supply = type(uint256).max; function mint(uint256 amount) public { supply += amount; }}"
Integer Overflow,"contract Broken { uint public total = 1000; function increase(uint x) public { total += x; }}"
Integer Overflow,"contract Unsafe { uint8 public max = 255; function raise(uint8 x) public { max += x; }}"
Integer Overflow,"contract Vulnerable { uint public cap = 2**256 - 1; function boost(uint x) public { cap += x; }}"
Integer Overflow,"contract Faulty { uint public limit = 100; function expand(uint x) public { limit += x; }}"
Integer Overflow,"contract Risky { uint public maxSupply = type(uint).max; function inflate(uint x) public { maxSupply += x; }}"
Integer Overflow,"contract Weak { uint8 public counter = 254; function inc() public { counter += 2; }}"
Unchecked External Calls,"contract CallRisk { function transfer(address payable dest, uint amount) public { dest.call{value: amount}(""); }}"
Unchecked External Calls,"contract SendNoCheck { function sendFunds(address payable to, uint amount) public { to.send(amount); }}"
Unchecked External Calls,"contract UnsafeTransfer { function pay(address payable recipient, uint value) public { recipient.transfer(value); }}"
Unchecked External Calls,"contract NoVerify { function execute(address target, uint value) public { target.call{value: value}(""); }}"
Unchecked External Calls,"contract BlindSend { function sendEther(address payable dst, uint amt) public { dst.call{value: amt}(""); }}"
Unchecked External Calls,"contract Trusting { function forward(address payable to, uint val) public { to.send(val); }}"
Unchecked External Calls,"contract Naive { function payOut(address payable beneficiary, uint sum) public { beneficiary.transfer(sum); }}"
Unchecked External Calls,"contract Reckless { function dispatch(address payable addr, uint qty) public { addr.call{value: qty}(""); }}"
Unchecked External Calls,"contract UnsafeCall { function transferTo(address payable target, uint amount) public { target.call{value: amount}(""); }}"
Unchecked External Calls,"contract NoGuard { function sendMoney(address payable dest, uint val) public { dest.transfer(val); }}"
Timestamp Dependence,"contract TimeGame { function play() public { require(block.timestamp % 2 == 0, ""Try again""); }}"
Timestamp Dependence,"contract Lottery { function win() public view returns (bool) { return block.timestamp % 10 == 0; }}"
Timestamp Dependence,"contract Bet { function isWinner() public view returns (bool) { return block.timestamp % 100 == 0; }}"
Timestamp Dependence,"contract CoinFlip { function flip() public view returns (bool) { return block.timestamp % 2 == 0; }}"
Timestamp Dependence,"contract Random { function lucky() public view returns (bool) { return block.timestamp % 7 == 0; }}"
Timestamp Dependence,"contract Gamble { function jackpot() public view returns (bool) { return block.timestamp % 1000 == 0; }}"
Timestamp Dependence,"contract RiskyRNG { function random() public view returns (uint) { return block.timestamp % 100; }}"
Timestamp Dependence,"contract TimeBased { function reward() public view returns (bool) { return block.timestamp % 5 == 0; }}"
Timestamp Dependence,"contract Unreliable { function chance() public view returns (bool) { return block.timestamp % 3 == 0; }}"
Timestamp Dependence,"contract Predicable { function outcome() public view returns (bool) { return block.timestamp % 20 == 0; }}"
Denial of Service,"contract Refund { address[] public recipients; function refundAll() public { for (uint i = 0; i < recipients.length; i++) { payable(recipients[i]).transfer(1 ether); }}}"
Denial of Service,"contract PayAll { address[] public users; function payout() public { for (uint i = 0; i < users.length; i++) { payable(users[i]).transfer(1 ether); }}}"
Denial of Service,"contract BatchSend { address[] public payees; function distribute() public { for (uint i = 0; i < payees.length; i++) { payable(payees[i]).send(1 ether); }}}"
Denial of Service,"contract GasLimit { uint[] public data; function fill() public { for (uint i = 0; i < 1e6; i++) { data.push(i); }}}"
Denial of Service,"contract LargeArray { uint[] public items; function addItems() public { for (uint i = 0; i < 5000; i++) { items.push(i); }}}"
Denial of Service,"contract InfiniteLoop { function loop() public { while (true) { }}}"
Denial of Service,"contract LockFunds { bool public locked; function unlock() public { require(!locked); locked = true; // Lock forever }}"
Denial of Service,"contract Blocking { function stall() public { while (gasleft() > 0) { }}}"
Denial of Service,"contract Freeze { function neverEnd() public { for (uint i = 0; i >= 0; i++) { }}}"
Denial of Service,"contract Hang { function infinite() public { while (true) { }}}"
Front-Running,"contract Auction { uint public highestBid; address public leader; function bid() public payable { require(msg.value > highestBid); highestBid = msg.value; leader = msg.sender; }}"
Front-Running,"contract Trade { uint public price; function setPrice(uint newPrice) public { price = newPrice; }}"
Front-Running,"contract BuyFirst { uint public salePrice; function buy() public payable { require(msg.value == salePrice); salePrice += msg.value; }}"
Front-Running,"contract Bidding { uint public topBid; function placeBid() public payable { if (msg.value > topBid) { topBid = msg.value; }}}"
Front-Running,"contract TokenSale { uint public rate; function buyTokens() public payable { rate = msg.value / 1e18; }}"
Front-Running,"contract PriceUpdate { uint public currentPrice; function update(uint newPrice) public { currentPrice = newPrice; }}"
Front-Running,"contract LastCall { uint public deadline; function setDeadline(uint time) public { deadline = time; }}"
Front-Running,"contract Race { uint public reward; function claim() public { reward = 100; }}"
Front-Running,"contract FirstWin { bool public claimed; function win() public { require(!claimed); claimed = true; }}"
Front-Running,"contract EarlyBird { uint public discount; function apply() public { discount = 10; }}"
Uninitialized Storage,"contract StorageBug { uint public value; function set(uint x) public { value = x; }}"
Uninitialized Storage,"contract MissingInit { uint public balance; function deposit() public payable { balance += msg.value; }}"
Uninitialized Storage,"contract Unset { uint public count; function increment() public { count++; }}"
Uninitialized Storage,"contract NoDefault { uint public total; function add(uint x) public { total += x; }}"
Uninitialized Storage,"contract Blank { uint public max; function raise(uint x) public { max = x; }}"
Uninitialized Storage,"contract Empty { uint public sum; function increase(uint x) public { sum += x; }}"
Uninitialized Storage,"contract Unassigned { uint public limit; function set(uint x) public { limit = x; }}"
Uninitialized Storage,"contract DefaultRisk { uint public cap; function update(uint x) public { cap = x; }}"
Uninitialized Storage,"contract NotSet { uint public amount; function adjust(uint x) public { amount = x; }}"
Uninitialized Storage,"contract Zero { uint public value; function assign(uint x) public { value = x; }}"
Access Control,"contract Admin { address public owner; function withdrawAll() public { payable(owner).transfer(address(this).balance); }}"
Access Control,"contract NoRestrict { function shutdown() public { selfdestruct(payable(msg.sender)); }}"
Access Control,"contract Open { function mint(uint amount) public { totalSupply += amount; }}"
Access Control,"contract Unprotected { address public admin; function changeAdmin(address newAdmin) public { admin = newAdmin; }}"
Access Control,"contract FreeForAll { function kill() public { selfdestruct(payable(msg.sender)); }}"
Access Control,"contract NoAuth { function updateCode(address newCode) public { // No permission check }}"
Access Control,"contract PublicBurn { function burn(uint amount) public { balance[msg.sender] -= amount; }}"
Access Control,"contract NoOwner { function transferFunds(address to, uint amount) public { payable(to).transfer(amount); }}"
Access Control,"contract Unauthorized { function setRate(uint newRate) public { rate = newRate; }}"
Access Control,"contract NoModifier { function freeze() public { locked = true; }}"
Arbitrary Jump,"contract JumpRisk { function execute(bytes memory code) public { assembly { jump(add(code, 0x20)) }}}"
Arbitrary Jump,"contract DynamicJump { function run(bytes memory bytecode) public { assembly { jump(bytecode) }}}"
Arbitrary Jump,"contract UnsafeAssembly { function jumpTo(address a) public { assembly { jump(a) }}}"
Arbitrary Jump,"contract CustomJump { function arbitrary(bytes memory target) public { assembly { jump(target) }}}"
Arbitrary Jump,"contract HackJump { function exploit(bytes memory code) public { assembly { jump(add(code, 32)) }}}"
Arbitrary Jump,"contract CodeJump { function execute(bytes memory data) public { assembly { jump(data) }}}"
Arbitrary Jump,"contract WildJump { function unsafe(bytes memory dest) public { assembly { jump(dest) }}}"
Arbitrary Jump,"contract RiskyJump { function go(bytes memory location) public { assembly { jump(location) }}}"
Arbitrary Jump,"contract UncheckedJump { function jumpAnywhere(bytes memory target) public { assembly { jump(target) }}}"
Arbitrary Jump,"contract AssemblyRisk { function runCode(bytes memory code) public { assembly { jump(add(code, 0x20)) }}}"