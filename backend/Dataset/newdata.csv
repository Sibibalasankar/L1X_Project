Vulnerability,Example,Severity,CWE-ID,Description,SecureExample
Reentrancy,"contract Vulnerable { mapping(address => uint) balances; function withdraw() public { uint amount = balances[msg.sender]; (bool success, ) = msg.sender.call{value: amount}(""); require(success); balances[msg.sender] = 0; }}",High,CWE-841,"External call before state update","contract Secure { mapping(address => uint) balances; function withdraw() public { uint amount = balances[msg.sender]; balances[msg.sender] = 0; (bool success, ) = msg.sender.call{value: amount}(""); require(success); }}"
Reentrancy,"contract Bank { mapping(address => uint) public balances; function withdrawAll() public { uint bal = balances[msg.sender]; (bool sent, ) = msg.sender.call{value: bal}(""); require(sent); balances[msg.sender] = 0; }}",High,CWE-841,"No reentrancy guard","contract SafeBank { mapping(address => uint) balances; bool private locked; modifier noReentrant() { require(!locked, ""Locked""); locked = true; _; locked = false; } function withdraw() public noReentrant { uint amount = balances[msg.sender]; balances[msg.sender] = 0; payable(msg.sender).transfer(amount); }}"
Reentrancy,"contract Payment { function pay(address payable to) public { uint amount = credit[msg.sender]; to.call{value: amount}(""); credit[msg.sender] = 0; }}",High,CWE-841,"Unsafe payment handling","contract SafePayment { function pay(address payable to) public { uint amount = credit[msg.sender]; credit[msg.sender] = 0; (bool success, ) = to.call{value: amount, gas: 2300}(""); require(success); }}"
Reentrancy,"contract Escrow { function release(address payable beneficiary) public { uint amount = funds[beneficiary]; beneficiary.call{value: amount}(""); funds[beneficiary] = 0; }}",High,CWE-841,"Fund release without checks","contract SafeEscrow { function release(address payable b) public { uint amount = funds[b]; funds[b] = 0; (bool sent, ) = b.call{value: amount}(""); require(sent); }}"
Reentrancy,"contract Vault { function cashOut() public { uint balance = userBalances[msg.sender]; msg.sender.call{value: balance}(""); userBalances[msg.sender] = 0; }}",High,CWE-841,"Direct transfer before update","contract SecureVault { function cashOut() public { uint balance = userBalances[msg.sender]; userBalances[msg.sender] = 0; payable(msg.sender).transfer(balance); }}"
Integer Overflow,"contract Overflow { uint8 public count = 255; function increment() public { count += 1; }}",Medium,CWE-190,"Unchecked increment","contract SafeCounter { uint8 public count = 255; function increment() public { require(count < type(uint8).max); count += 1; }}"
Integer Overflow,"contract Token { uint256 public totalSupply; function mint(uint256 amount) public { totalSupply += amount; }}",Medium,CWE-190,"Unsafe supply increase","contract SafeToken { uint256 public totalSupply; function mint(uint256 amount) public { require(totalSupply + amount > totalSupply); totalSupply += amount; }}"
Integer Overflow,"contract Auction { uint public endTime; function extend(uint duration) public { endTime += duration; }}",Medium,CWE-190,"Time extension overflow","contract SafeAuction { uint public endTime; function extend(uint duration) public { require(endTime + duration > endTime); endTime += duration; }}"
Integer Overflow,"contract Math { function add(uint x, uint y) public pure returns (uint) { return x + y; }}",Medium,CWE-190,"No overflow check","contract SafeMath { function add(uint x, uint y) public pure returns (uint) { uint sum = x + y; require(sum >= x); return sum; }}"
Integer Overflow,"contract Voting { uint16 public votes; function castVote() public { votes += 1; }}",Medium,CWE-190,"Small integer overflow","contract SafeVoting { uint16 public votes; function castVote() public { require(votes < type(uint16).max); votes += 1; }}"
Unchecked External Calls,"contract CallRisk { function transfer(address payable dest, uint amount) public { dest.call{value: amount}(""); }}",Medium,CWE-476,"No success check","contract SafeTransfer { function transfer(address payable dest, uint amount) public { (bool success, ) = dest.call{value: amount}(""); require(success); }}"
Unchecked External Calls,"contract Forwarder { function send(address payable target) public { target.send(100); }}",Medium,CWE-476,"Unverified send","contract SafeForwarder { function send(address payable target) public { bool sent = target.send(100); require(sent); }}"
Unchecked External Calls,"contract Proxy { function execute(address target) public { target.delegatecall(msg.data); }}",High,CWE-476,"Unsafe delegatecall","contract SafeProxy { function execute(address target, bytes memory data) public { (bool success, ) = target.delegatecall(data); require(success); }}"
Unchecked External Calls,"contract Payout { function payAll(address[] memory recipients) public { for (uint i=0; i<recipients.length; i++) { payable(recipients[i]).transfer(1 ether); }}}",Medium,CWE-476,"Batch transfer without checks","contract SafePayout { function payAll(address[] memory recipients) public { for (uint i=0; i<recipients.length; i++) { (bool sent, ) = payable(recipients[i]).call{value: 1 ether}(""); require(sent); }}}"
Unchecked External Calls,"contract Wallet { function withdraw(address payable to) public { to.transfer(address(this).balance); }}",Medium,CWE-476,"Full balance transfer risk","contract SafeWallet { function withdraw(address payable to) public { uint balance = address(this).balance; (bool sent, ) = to.call{value: balance}(""); require(sent); }}"
Timestamp Dependence,"contract TimeGame { function play() public { require(block.timestamp % 2 == 0); }}",Low,CWE-829,"Block timestamp reliance","contract SecureGame { function play() public { require(uint(keccak256(abi.encodePacked(blockhash(block.number-1))) % 2 == 0); }}"
Timestamp Dependence,"contract Lottery { function drawWinner() public view returns (bool) { return block.timestamp % 10 == 0; }}",Low,CWE-829,"Predictable timestamp","contract FairLottery { function drawWinner() public view returns (bool) { return uint(keccak256(abi.encodePacked(block.difficulty))) % 10 == 0; }}"
Timestamp Dependence,"contract CoinFlip { function flip() public view returns (bool) { return block.timestamp % 2 == 0; }}",Low,CWE-829,"Weak randomness","contract SecureFlip { function flip() public view returns (bool) { return uint(keccak256(abi.encodePacked(block.prevrandao))) % 2 == 0; }}"
Timestamp Dependence,"contract Raffle { function selectWinner() public view returns (address) { return block.timestamp % participants.length == 0 ? msg.sender : address(0); }}",Low,CWE-829,"Time-based selection","contract SecureRaffle { function selectWinner() public view returns (address) { return uint(keccak256(abi.encodePacked(block.prevrandao))) % participants.length == 0 ? msg.sender : address(0); }}"
Timestamp Dependence,"contract Reward { function isRewardTime() public view returns (bool) { return block.timestamp % 86400 == 0; }}",Low,CWE-829,"Fixed time rewards","contract DynamicReward { function isRewardTime() public view returns (bool) { return uint(keccak256(abi.encodePacked(blockhash(block.number-1)))) % 86400 == 0; }}"
Denial of Service,"contract Refund { address[] recipients; function refundAll() public { for (uint i = 0; i < recipients.length; i++) { payable(recipients[i]).transfer(1 ether); }}}",High,CWE-400,"Unbounded loop","contract SafeRefund { address[] recipients; function refundAll() public { uint gasLimit = gasleft() / recipients.length; for (uint i = 0; i < recipients.length; i++) { (bool success, ) = payable(recipients[i]).call{value: 1 ether, gas: gasLimit}(""); require(success); }}}"
Denial of Service,"contract Registry { address[] users; function register() public { users.push(msg.sender); }}",Medium,CWE-400,"Unlimited array growth","contract SafeRegistry { address[] users; uint maxUsers = 1000; function register() public { require(users.length < maxUsers); users.push(msg.sender); }}"
Denial of Service,"contract Voting { mapping(address => bool) hasVoted; function vote() public { require(!hasVoted[msg.sender]); hasVoted[msg.sender] = true; }}",Low,CWE-400,"State lock","contract SafeVoting { function vote() public { hasVoted[msg.sender] = true; }}"
Denial of Service,"contract Queue { uint[] data; function enqueue(uint x) public { data.push(x); }}",Medium,CWE-400,"Unbounded storage","contract SafeQueue { uint[] data; uint maxSize = 100; function enqueue(uint x) public { require(data.length < maxSize); data.push(x); }}"
Denial of Service,"contract Game { function play() public { while (true) {} }}",High,CWE-400,"Infinite loop","contract SafeGame { function play() public { for (uint i=0; i<100; i++) {} }}"
Front-Running,"contract Auction { uint public highestBid; function bid() public payable { require(msg.value > highestBid); highestBid = msg.value; }}",Medium,CWE-300,"Transparent bidding","contract CommitAuction { mapping(address => bytes32) bids; function commitBid(bytes32 hash) public { bids[msg.sender] = hash; } function revealBid(uint value, bytes32 secret) public { require(keccak256(abi.encodePacked(value, secret)) == bids[msg.sender]); }}"
Front-Running,"contract Trade { uint public price; function setPrice(uint newPrice) public { price = newPrice; }}",Low,CWE-300,"Mutable price","contract SafeTrade { uint public price; function setPrice(uint newPrice) public { require(msg.sender == owner); price = newPrice; }}"
Front-Running,"contract TokenSale { uint public rate; function buy() public payable { rate = msg.value / 1e18; }}",Medium,CWE-300,"Dynamic price risk","contract FixedRateSale { uint public constant rate = 100; function buy() public payable { uint tokens = msg.value * rate; }}"
Front-Running,"contract Reward { uint public lastClaim; function claim() public { require(block.timestamp > lastClaim + 1 days); lastClaim = block.timestamp; }}",Low,CWE-300,"Time-based claim","contract SafeReward { mapping(address => uint) lastClaim; function claim() public { require(block.timestamp > lastClaim[msg.sender] + 1 days); lastClaim[msg.sender] = block.timestamp; }}"
Front-Running,"contract Giveaway { bool public claimed; function claim() public { require(!claimed); claimed = true; }}",Medium,CWE-300,"First-come advantage","contract FairGiveaway { mapping(address => bool) claimed; function claim() public { require(!claimed[msg.sender]); claimed[msg.sender] = true; }}"